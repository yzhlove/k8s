apiVersion: v1 # 必选，API的版本号
kind: Pod # 必选，类型Pod
metadata: # 必选，元数据
  name: nginx # 必选, 符合RFC1035规范的Pod名称
  namespace: default # 可选，Pod所在的命名空间，不指定默认为default，可以使用-n指定namespace ， 一般不会在yaml文件中写
  labels: # 可选，标签选择器，一般用于过滤和区分Pod
    app: nginx
    role: frontend # 标签可以写多个
  annotations: # 可选，注释列表，可以写多个
    app: nginx
spec: # 必选，用于定义容器的详细信息
  initContainers: #  初始化容器，在容器启动之前执行一些初始化操作
    - name: init-containers
      command:
        - sh
        - c
        - echo "I am InitContainer for init some configuration"
      image: alpine
      imagePullPolicy: IfNotPresent
  containers: # 必选，容器列表
    - name: nginx # 必选，符合RFC1025规范的容器名称 ,
      image: nginx:latest # 必选，容器所用的镜像地址, 一般正式环境下面这个是我们自己的业务镜像
      imagePullPolicy: Always # 可选，镜像拉去策略 [ IfNotPresent 如果主机有这个镜像，那就不需要拉去了] [Always 总是拉去] [Never 不管是否存在都不拉取]
      command: # 可选，容器启动执行的命令 类似docker的 ERNTRYPOINT
        - nginx
        - -g
        - "daemon off;"
      workingDir: /usr/share/nginx/html # 可选，容器的工作目录
      volumeMounts:
        - mountPath: /usr/share/nginx/html # 可选，存储卷配置 , 可以配置多个
          name: webroot # 存储卷名称
          readOnly: true #  只读
      ports: # 可选，容器需要暴露的端口号列表
        - containerPort: 80 # 端口号
          name: http # 端口名称
          protocol: TCP # 端口协议
      env: # 可选，环境变量配置列表
        - name: TZ # 变量名称
          value: Asia/Shanghai # 变量值
        - name: LANG
          value: en_US.UTF8
      resources: # 可选，限制资源以及限制请求资源
        limits: # 最大限制设置
          cpu: 1000m
          memory: 512Mi
        requests: #  启动所需资源
          cpu: 100m
          memory: 512Mi
      startupProbe: # 可选，健康检查，检查容器内的进程是否完成启动，注意三种检查方式只能选择一种
        httpGet: # httpGet 检测方式,生成环境建议使用httpGet实现接口级健康检查，健康检查由应用程序提供
          port: 80 # 监控端口
          path: /heart_point # 检查路径
      readinessProbe: # 可选，健康检查，注意三种检查方式只能选择一种
        httpGet:
          port: 80
          path: /heart_point
      livenessProbe: # 可选，健康检查方式
        exec: # 执行容器的命令检测方式
          command:
            - cat
            - /hearth
        httpGet: # 执行一个httpGet请求检查
          port: 8080
          path: /hearth
          httpHeaders:
            - name: end-user
              value: Nick
        tcpSocket: # 执行一个TCP链接检查
          port: 80
        initialDelaySeconds: 60 # 初始化时间
        timeoutSeconds: 2 # 超时时间
        periodSeconds: 1 # 检测间隔
        successThreshold: 2 # 检查成功为2次表示就绪
        failureThreshold: 1 # 检查失败为1次表示未就绪
      lifecycle: # 生命周期
        postStart: # 容器创建完成后执行的指定，可以使 exec / httpGet / TCPSocket
          exec:
            command:
              - sh
              - c
              - "mkdir /data/"
        preStop:
          httpGet:
            port: 80
            path: /
          exec:
            command:
              - sh
              - -c
              - sleep 9
  restartPolicy: Always # 可选，重启策略，默认为Always [Always容器故障或者没有启动成功则自动启动该容器] [OnFailure 容器以不为0的状态码退出则自动重启该容器] [Never无论何种状态都不重启]
  nodeSelector: # 可选，指定Node节点
    region: subnet7
  imagePullSecrets: # 可选，拉去镜像使用的secret ，可以配置多个
    - name: default-docker-cfg-08d0f
  hostNetwork: false # 是否为主机模式，如果是主机模式则会占用本地端口
  volumes: # 共享存储卷列表
    - name: webroot # 名称，与上述对应
      emptyDir: {} # 挂在目录

